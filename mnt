#!/usr/bin/bash

# Function to get section of ini file
function getConfigSection() {
    COUNT=$(grep -A64 -Ex "^\[$2\]$" $1 | grep -Ex "^\[.*\]" -c)
    if [[ "$COUNT" -eq "1" ]]
    then
        grep -A64 -Ex "^\[${2}\]$" ${1} | grep -Ex "^.*=.*$" | sed "s/ *= */=/g"
    else
        grep -A64 -Ex "^\[${2}\]$" ${1} | 
        grep -B64 -Ex "^\[[^${2:0:1}].*\]$" | grep -Ex "^.*=.*$" | sed "s/ *= */=/g"
    fi
}

# Get all disk parts with labels with simple regex
DATA=$(lsblk -nio PATH,LABEL | expand | grep -E '^/dev/\w{3}[0-9]+.*(\w|\d)+')
IFS=$'\n' # Only new-line charachter is separator

declare -A assoc # Associative array with parts labels
declare -A parts # Array with disks parts

# Create or touch config file
mkdir ~/.config/mnt/ -p # Create config directory if it doesn't exists
touch ~/.config/mnt/config.ini # Create config file if it doesn't exists

# Get associations for part labels
for var in $(getConfigSection ~/.config/mnt/config.ini associations)
do
    name1=$(echo $var | awk -F '=' '{print $1}')
    name2=$(echo $var | awk -F '=' '{print $2}')

    # Make asociations
    assoc[$name1]=$name2
done

# Get /dev/name and label of parts
for var in $DATA
do
    dev=$(echo $var | awk '{print $1}')
    label=$(echo $var | awk '{$1=""; print $0}' | sed -r 's/^ *| *$//g')

    parts[$label]=$dev
done

# Get the list of disks in the required form
declare -a REQUEST
OFF=0
for var in ${!parts[*]}
do
    REQUEST[OFF++]=$var
    REQUEST[OFF++]=${parts[$var]}

    if [[ $(lsblk -o MOUNTPOINT ${parts[$var]}) == *'/'* ]]
    then REQUEST[OFF++]=ON
    else REQUEST[OFF++]=OFF
    fi
done

# Find out which disks need to be mounted and which ones need to be unmounted
QUERY=$(whiptail --title "Disk mount dialog" --checklist "Select the disks to mount" $((${#parts[*]}+7)) 75 ${#parts[*]} ${REQUEST[*]} 3>&1 1>&2 2>&3)
if [[ $? != 0 ]]
then
    echo "The operation was canceled by user"
    exit 1
fi

# We mount the marked disks and unmount the unmarked ones
for var in ${!parts[*]}
do
    name=$var

    if [[ ${!assoc[*]} == *$var* ]]
    then
        name=${assoc[$var]}
    fi

    if [[ $QUERY == *$var* ]]
    then
        sudo mkdir "/mnt/$name" -p
        sudo mount ${parts[$var]} /mnt/$name 2>/dev/null && \
        echo "$var was mounted to /mnt/$name"
    else
        sudo umount ${parts[$var]} --quiet && \
        sudo rmdir /mnt/$name 2>/dev/null && \
        echo "$var was unmounted"
    fi
done

exit 0 # The program worked without errors